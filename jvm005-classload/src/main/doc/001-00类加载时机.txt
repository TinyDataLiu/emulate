》类加载时机
    类从被加载到虚拟机内存开始，到卸载出内存为止，它的声明周期包括：
    加载[Loading]->验证[Verification]->准备[Preparation]->解析[Resolution]->初始化[Initialization]->使用[Using]->卸载[Unloading]  7个阶段

    验证，准备，解析三个部分统一称为Linking

    加载》验证》准备》初始化》卸载  5个阶段的顺序是确定的
    而解析阶段则不一定：它在某些情况下可以再初始化以后，因为java支持运行时绑定。

    加载：加载由虚拟机自己去决定实现。

    ====================================================================================================================================================
    初始化：虚拟机严格规定了，有且只有五中情况必须立即对类进行初始化（当然，加载，验证，准备会在初始化之前）。

    1.遇到new,getstatic,putstatic或invokestatic 四条指令时。如果类没有进行初始化则优先触发初始化过程。生成这四种
    指令最常见的Java代码场景是：使用new关键字实例化对象的时候。读取或设置一个类的静态字段的时候（被final修饰，已在编译期把结果放入常量池的今天字段除外）
    以及调用一个类的静态方法的时候。
    2.使用java.lang.reflect 包的方法对类进行反射调用的时候，如果类没有进行初始化，优先初始化。
    3.如果触发初始化，发现其父类还没有进行初始化则优先对父类进行初始化。
    4.当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。
    5.当使用动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后解析的结果REF_getStatic,REF_putStatic,REF_invokeStatic的方法句柄，
    并且这个方法句柄锁对应的类没有进行过初始化，则优先触发初始化。

    这五种的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化。

    被动引用场景：
