》垃圾回收器总结：


Serial                  ParNew                      Parallel Scavenge           新生代


                        G1                                                      G1收集器（年轻代-老年代）


Serial  Old             CMS                         Parallel Old                老年代


复制算法：
    Serial              :单线程，高效
    ParNew              :Serial 的多线程版本 ，注重响应速度
    Parallel Scavenge   :注重吞吐量，CPU利用率

标记-清除
    CMS                 :唯一使用标记-整理清除算法的老年代收集器。有内存碎片。

标记-整理
    Serial   Old        :Serial 老年代版本， 注重的是响应速度。（万能老年代回收器，和所有的新生代回收器都能搭配使用）
    Parallel Old        :Parallel Scavenge 的老年代的版本。多线程收集器，吞吐量。

G1：
    比较新的收集器。主要是分区，用复制回收算法， 以及标记清除算法 的混合算法。分区与分区之间用的是，复制算法。
    总体上来看使用的标记-清除算法。



CMS             -> Serial | ParNew                      :特殊说明， 这里使用CMS Concurrent Mode Failure报错的时候会使用Serial Old 的备用收集器。
Serial Old      -> Serial | ParNew | Parallel Scavenge  :万能收集器，可以和所有的新生代收集器进行组合。
Parallel Old    -> Parallel Scavenge                    :Parallel Scavenge 收集器的专用搭配。



分析整理：从回收算法上来看， 新生代算法都是运用复制回收算法， 因为新生代进行了分区。 适合复制回收算法。当然这里的分区并没有进行1:1 分区   e：f：t 进行了 8:1:1 分区。
这里是经过数据分析所得的结果， 基本98%左右的对象都是朝生夕死，所以这样的分区，能够有效的用小内存。

老年代用的算法，标记-清除，或者复制-整理算法。 这里主要是因为， 老年代没有更多的空间来为本区域进行分配担保， 当分配失败的时候，无法进行担保。


标记清除算法 没有整理功能 ， 所以无法100% 使用老年代空间。这里会产生内存碎片， 当大对象分区时候， 会由于连续空间不足而造成分区区域不足， 所以会进行多余的GC。
标记整理算法 有整理功能，但是会更加耗时。因为增加了整理过程。





