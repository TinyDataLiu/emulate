》无关性基石
    平台无关性
    语言无关性

》Class类文件结构
    class文件是一组以8位字节为基础单位的二进制流，各个数据项目严格的按照顺序紧凑的排列在class文件中，
    中间没有任何分隔符，


    存储数据：
        无符号数：属于基本的数据类型，以u1,u2,u4,u8分别代表1,2,4,8个字节。无符号数可以用来描述数字，索引引用，数量值，或者以UTF-8编码构成的字符串值。
        表：表是由多个无符号数，或者其他表作为数据项的复合数据类型。所有的表都习惯性的以_info结尾。整个class 本质上就是一张表。

        结构如下
        ==================================================================
        type            |      name            |    count
        ==================================================================
        u4              | magic                |     1                      （魔数 Magic Number）确定是class文件
        ==================================================================
        u2              | minor_version        |     1                       次版本号
        ==================================================================
        u2              | major_version        |     1                       主版本号       向下兼容
        ==================================================================
        u2              | constant_pool_count  |     1
        ==================================================================
        cp_info         | constant_pool        |     constant_pool_count-1
        ==================================================================
        u2              | access_flags         |     1
        ==================================================================
        u2              | this_class           |     1
        ==================================================================
        u2              | super_class          |     1
        ==================================================================
        u2              | interface_count      |     1
        ==================================================================
        u2              | interfaces           |     interface_count
        ==================================================================
        u2              | fields_count         |     1
        ==================================================================
        field_info      | fields               |     fields_count
        ==================================================================
        u2              | methods_count        |     1
        ==================================================================
        method_info     | methods              |     methods_count
        ==================================================================
        u2              | attributes_count     |     1
        ==================================================================
        attribute_info  | attributes           |     attributes_count
        ==================================================================

》魔数（magic）
    每个class文件的头四个字节称为魔数（Magic Number），唯一作用就是确定这个文件是否为能被虚拟机接受的class文件。基于安全考虑，不用扩展名，因为扩展名可以随意修改。
    值为0xCAFEBABE(咖啡宝贝?)

》常量池（constant_pool）
    Class文件的资源仓库，是Class文件结构中与其他项目关联最多的数据类型，也是占用Class文件中占用空间最大的数据项目之一，是Class文件中第一个出现的表类型的数据项目。
    由于常量池中常量数量不固定，所以常量池的入口放置了u2类型的数据（constant_pool_count），代表常量池容量计数值。从1开始。
    存放两大类常量：
        字面量：字面量比较接近于Java语言层面的常量概念，如文本字符串，声明为final的常量值等。
        符号引用：编译原理方面的概念。

            类和接口的全限定名
            字段的名称和描述符
            方法的名称和描述符
            Java代码在进行javac编译的时候，并不会像c/c++那样，有‘连接’这一步骤，而是在虚拟机加载Class文件的时候进行动态连接。也就是说，Class文件中不会保存各个
            方法，字段的最终内存布局信息。因此这些字段，方法的符号引用不经过运行期转换的话无法得到真正的内存入口地址，也就无法直接被虚拟机直接使用。当虚拟机运行时，需要
            从常量池中获得对应的符号引用，再在类创建时或运行时解析，翻译到具体的内存地址中。

            常量类型：开头都是以u1开头的标志位tag（用于区分常量类型）
            ====================================================================================
            type                             |tag(u1)                     |desc
            ====================================================================================
            CONSTANT_Utf8_info               |1                           |UTF-8编码的字符串
            ====================================================================================
            CONSTANT_Integer_info            |3                           |整形类型字面量
            ====================================================================================
            CONSTANT_Float_info              |4                           |浮点型字面量
            ====================================================================================
            CONSTANT_Long_info               |5                           |长整型字面量
            ====================================================================================
            CONSTANT_Double_info             |6                           |双精度浮点型字面量
            ====================================================================================
            CONSTANT_Class_info              |7                           |类或接口的符号引用
            ====================================================================================
            CONSTANT_String_info             |8                           |字符串类型字面量
            ====================================================================================
            CONSTANT_Fieldref_info           |9                           |字段的符号引用
            ====================================================================================
            CONSTANT_Methodref_info          |10                          |类中方法的符号引用
            ====================================================================================
            CONSTANT_InterfaceMethodreg_info |11                          |接口中方法的符号引用
            ====================================================================================
            CONSTANT_NameAndType_info        |12                          |字段或方法的部分符号引用
            ====================================================================================
            CONSTANT_MethodHandle_info       |15                          |表示方法句柄
            ====================================================================================
            CONSTANT_MethodType_info         |16                          |标志方法类型
            ====================================================================================
            CONSTANT_InvokeDynamic_info      |18                          |表示一个动态方法的调用点
            ====================================================================================

》访问标志
    常量池后紧接着两个字节代表访问标志（access_flags），用于标志访问类或者接口层次的访问信息。包括这个Class是类还是接口；
    是否定义public 类型；如果是类的话，是否被声明为final。




